confirmed <- confirmed.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"state")
# Deaths
deaths <- deaths.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"state")
# Deaths
recovered <- recovered.raw %>%
filter(Country.Region=="Australia") %>%
filter("ï..Province.State"!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = "ï..Province.State")
recovered <- gather(recovered, key = "date", value = "recovered", -"state")
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("state", "date"))
aus.corona <- left_join(aus.corona, recovered, by = c("state", "date"))
# Fix State factor levels mess
aus.corona$state <- as.character(aus.corona$state)
aus.corona$state <- as.factor(aus.corona$state)
# fix datemess
aus.corona$date <- gsub("X", "0", aus.corona$date)
aus.corona$date <- as.Date(aus.corona$date, "%m.%d.%y")
# Calculate national totals
temp.sum.nat <- aus.corona%>%
group_by(date)%>%
summarise(confirmed = sum(confirmed), deaths = sum(deaths), recovered = sum(recovered))
temp.sum.nat$state <- "National"
aus.corona <- rbind(aus.corona, temp.sum.nat)
# Calculate active cases
aus.corona$active <- aus.corona$confirmed - aus.corona$deaths - aus.corona$recovered
# Make total and daily
aus.corona$type <-"cumulative"
# Calculate new cases
aus.corona.new <- aus.corona%>%
group_by(state)%>%
mutate(confirmed.lag1 = lag(confirmed, n = 1, order_by = date)) %>%
mutate(deaths.lag1 = lag(deaths, n = 1, order_by = date)) %>%
mutate(recovered.lag1 = lag(recovered, n = 1, order_by = date)) %>%
mutate(active.lag1 = lag(active, n = 1, order_by = date))
# Overwrite cumaltive with new daily case
aus.corona.new$confirmed <- aus.corona.new$confirmed - aus.corona.new$confirmed.lag1
aus.corona.new$deaths <- aus.corona.new$deaths - aus.corona.new$deaths.lag1
aus.corona.new$recovered <- aus.corona.new$recovered - aus.corona.new$recovered.lag1
aus.corona.new$active <- aus.corona.new$active - aus.corona.new$active.lag1
aus.corona.new$type <- "daily"
aus.corona.new <- aus.corona.new[,c("state", "date", "confirmed", "deaths", "recovered","active", "type")]
# combine the two cumulative and new
aus.corona <- dplyr::bind_rows(aus.corona, aus.corona.new)
# make it long to be able to use levels in ggplot
aus.corona <- aus.corona%>%
gather(key = status, value = no.of.cases, -c(state, date, type))
# Make capitalized status for prettier labels
aus.corona$status[aus.corona$status=="confirmed"] <-"Confirmed"
aus.corona$status[aus.corona$status=="active"] <-"Active"
aus.corona$status[aus.corona$status=="deaths"] <-"Deaths"
aus.corona$status[aus.corona$status=="recovered"] <-"Recovered"
# Ordered levels
aus.corona$status <- factor(aus.corona$status, levels = c("Confirmed", "Active", "Recovered", "Deaths"))
# For series filtering
aus.corona$tokeep <- 0
# separate files for each state
aus.corona.nat <- aus.corona%>%filter(state == "National")
aus.corona.act <- aus.corona%>%filter(state == "Australian Capital Territory")
aus.corona.nsw <- aus.corona%>%filter(state == "New South Wales")
aus.corona.nt <- aus.corona%>%filter(state == "Northern Territory")
aus.corona.qld <- aus.corona%>%filter(state == "Queensland")
aus.corona.sa <- aus.corona%>%filter(state == "South Australia")
aus.corona.tas <- aus.corona%>%filter(state == "Tasmania")
aus.corona.vic <- aus.corona%>%filter(state == "Victoria")
aus.corona.wa <- aus.corona%>%filter(state == "Western Australia")
# Get min and max dates in the full sample
date.max <- max(aus.corona$date, na.rm = TRUE)
date.min <- min(aus.corona$date, na.rm = TRUE)
runApp('App - Worked until last change to data.R')
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), encoding = "UTF-8")
View(recovered.raw)
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), encoding = "UTF-8-BOM")
View(recovered.raw)
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
View(recovered.raw)
runApp('App - Worked until last change to data.R')
names(recovered.raw)[1] <- "Province.State"
runApp('App - Worked until last change to data.R')
runApp('App - Worked until last change to data.R')
########################   Basic stuff for new file ##################################
##### clear env ####
rm(list = ls())
library(shiny)
library(plotly)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(scales)
library(gridExtra)
library(lubridate)
library(openxlsx)
library(date)
##################### Fetch updated data ##########################
#### Get data from sources:
#Old depreciated sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
#To use now:
confirmed.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
deaths.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
#### Prep data
# confirmed cases
confirmed <- confirmed.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"state")
# Deaths
deaths <- deaths.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"state")
# Recovered
names(recovered.raw)[1] <- "Province.State"
recovered <- recovered.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
recovered <- gather(recovered, key = "date", value = "recovered", -"state")
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("state", "date"))
aus.corona <- left_join(aus.corona, recovered, by = c("state", "date"))
# Fix State factor levels mess
aus.corona$state <- as.character(aus.corona$state)
aus.corona$state <- as.factor(aus.corona$state)
# fix datemess
aus.corona$date <- gsub("X", "0", aus.corona$date)
aus.corona$date <- as.Date(aus.corona$date, "%m.%d.%y")
# Calculate national totals
temp.sum.nat <- aus.corona%>%
group_by(date)%>%
summarise(confirmed = sum(confirmed), deaths = sum(deaths), recovered = sum(recovered))
temp.sum.nat$state <- "National"
aus.corona <- rbind(aus.corona, temp.sum.nat)
# Calculate active cases
aus.corona$active <- aus.corona$confirmed - aus.corona$deaths - aus.corona$recovered
# Make total and daily
aus.corona$type <-"cumulative"
# Calculate new cases
aus.corona.new <- aus.corona%>%
group_by(state)%>%
mutate(confirmed.lag1 = lag(confirmed, n = 1, order_by = date)) %>%
mutate(deaths.lag1 = lag(deaths, n = 1, order_by = date)) %>%
mutate(recovered.lag1 = lag(recovered, n = 1, order_by = date)) %>%
mutate(active.lag1 = lag(active, n = 1, order_by = date))
# Overwrite cumaltive with new daily case
aus.corona.new$confirmed <- aus.corona.new$confirmed - aus.corona.new$confirmed.lag1
aus.corona.new$deaths <- aus.corona.new$deaths - aus.corona.new$deaths.lag1
aus.corona.new$recovered <- aus.corona.new$recovered - aus.corona.new$recovered.lag1
aus.corona.new$active <- aus.corona.new$active - aus.corona.new$active.lag1
aus.corona.new$type <- "daily"
aus.corona.new <- aus.corona.new[,c("state", "date", "confirmed", "deaths", "recovered","active", "type")]
# combine the two cumulative and new
aus.corona <- dplyr::bind_rows(aus.corona, aus.corona.new)
# make it long to be able to use levels in ggplot
aus.corona <- aus.corona%>%
gather(key = status, value = no.of.cases, -c(state, date, type))
# Make capitalized status for prettier labels
aus.corona$status[aus.corona$status=="confirmed"] <-"Confirmed"
aus.corona$status[aus.corona$status=="active"] <-"Active"
aus.corona$status[aus.corona$status=="deaths"] <-"Deaths"
aus.corona$status[aus.corona$status=="recovered"] <-"Recovered"
# Ordered levels
aus.corona$status <- factor(aus.corona$status, levels = c("Confirmed", "Active", "Recovered", "Deaths"))
# For series filtering
aus.corona$tokeep <- 0
# separate files for each state
aus.corona.nat <- aus.corona%>%filter(state == "National")
aus.corona.act <- aus.corona%>%filter(state == "Australian Capital Territory")
aus.corona.nsw <- aus.corona%>%filter(state == "New South Wales")
aus.corona.nt <- aus.corona%>%filter(state == "Northern Territory")
aus.corona.qld <- aus.corona%>%filter(state == "Queensland")
aus.corona.sa <- aus.corona%>%filter(state == "South Australia")
aus.corona.tas <- aus.corona%>%filter(state == "Tasmania")
aus.corona.vic <- aus.corona%>%filter(state == "Victoria")
aus.corona.wa <- aus.corona%>%filter(state == "Western Australia")
# Get min and max dates in the full sample
date.max <- max(aus.corona$date, na.rm = TRUE)
date.min <- min(aus.corona$date, na.rm = TRUE)
View(aus.corona.nat)
View(recovered)
View(aus.corona)
########################   Basic stuff for new file ##################################
##### clear env ####
rm(list = ls())
library(shiny)
library(plotly)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(scales)
library(gridExtra)
library(lubridate)
library(openxlsx)
library(date)
##################### Fetch updated data ##########################
#### Get data from sources:
#Old depreciated sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
#To use now:
confirmed.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
deaths.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
#### Prep data
# confirmed cases
confirmed <- confirmed.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"state")
# Deaths
deaths <- deaths.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"state")
# Recovered
names(recovered.raw)[1] <- "Province.State"
recovered <- recovered.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
recovered <- gather(recovered, key = "date", value = "recovered", -"state")
View(recovered)
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("state", "date"))
View(aus.corona)
aus.corona <- left_join(aus.corona, recovered, by = c("state", "date"))
View(recovered)
runApp('App - Worked until last change to data.R')
########################   Basic stuff for new file ##################################
##### clear env ####
rm(list = ls())
library(shiny)
library(plotly)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(scales)
library(gridExtra)
library(lubridate)
library(openxlsx)
library(date)
##################### Fetch updated data ##########################
#### Get data from sources:
#Old depreciated sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
#To use now:
confirmed.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
deaths.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
#### Prep data
# confirmed cases
confirmed <- confirmed.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"state")
confirmed$state <-as.character(confirmed$state)
# Deaths
deaths <- deaths.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"state")
deaths$state <-as.character(deaths$state)
# Recovered
names(recovered.raw)[1] <- "Province.State"
recovered <- recovered.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
recovered <- gather(recovered, key = "date", value = "recovered", -"state")
recovered$state <-as.character(recovered$state)
# Put it together
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("state", "date"))
View(aus.corona)
aus.corona <- left_join(aus.corona, recovered, by = c("state", "date"))
########################   Basic stuff for new file ##################################
##### clear env ####
rm(list = ls())
library(shiny)
library(plotly)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(scales)
library(gridExtra)
library(lubridate)
library(openxlsx)
library(date)
##################### Fetch updated data ##########################
#### Get data from sources:
#Old depreciated sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
#To use now:
confirmed.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
deaths.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
###
View(recovered.raw)
View(deaths.raw)
View(confirmed.raw)
##### clear env ####
rm(list = ls())
library(shiny)
library(plotly)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(scales)
library(gridExtra)
library(lubridate)
library(openxlsx)
library(date)
##################### Fetch updated data ##########################
#### Get data from sources:
#Old depreciated sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
#To use now:
confirmed.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
deaths.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
#### Prep data
# confirmed cases
confirmed <- confirmed.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"state")
confirmed$state <-as.character(confirmed$state)
# Deaths
deaths <- deaths.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"state")
deaths$state <-as.character(deaths$state)
# Recovered
names(recovered.raw)[1] <- "Province.State"
recovered <- recovered.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
recovered <- gather(recovered, key = "date", value = "recovered", -"state")
recovered$state <-as.character(recovered$state)
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("state", "date"))
aus.corona <- left_join(aus.corona, recovered, by = c("state", "date"))
View(recovered.raw)
View(recovered)
View(deaths)
View(recovered)
runApp('App - Worked until last change to data.R')
########################   Basic stuff for new file ##################################
##### clear env ####
rm(list = ls())
library(shiny)
library(plotly)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(scales)
library(gridExtra)
library(lubridate)
library(openxlsx)
library(date)
##################### Fetch updated data ##########################
#### Get data from sources:
#Old depreciated sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
#To use now:
confirmed.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
deaths.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
#### Prep data
# confirmed cases
confirmed <- confirmed.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"state")
confirmed$state <-as.character(confirmed$state)
# Deaths
deaths <- deaths.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"state")
deaths$state <-as.character(deaths$state)
# Recovered
names(recovered.raw)[1] <- "Province.State"
recovered <- recovered.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
recovered <- gather(recovered, key = "date", value = "recovered", -"state")
recovered$state <-as.character(recovered$state)
# fix date inconsistency
recovered$state <-  gsub("2020", "20", aus.corona$date)
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("state", "date"))
aus.corona <- left_join(aus.corona, recovered, by = c("state", "date"))
View(aus.corona)
View(recovered)
runApp('App - Worked until last change to data.R')
########################   Basic stuff for new file ##################################
##### clear env ####
rm(list = ls())
library(shiny)
library(plotly)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(scales)
library(gridExtra)
library(lubridate)
library(openxlsx)
library(date)
##################### Fetch updated data ##########################
#### Get data from sources:
#Old depreciated sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
#To use now:
confirmed.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"))
deaths.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"))
recovered.raw <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"), fileEncoding  = "UTF-8-BOM")
#### Prep data
# confirmed cases
confirmed <- confirmed.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"state")
confirmed$state <-as.character(confirmed$state)
# Deaths
deaths <- deaths.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"state")
deaths$state <-as.character(deaths$state)
# Recovered
names(recovered.raw)[1] <- "Province.State"
recovered <- recovered.raw %>%
filter(Country.Region=="Australia") %>%
filter(Province.State!="From Diamond Princess") %>%
select (-c(Country.Region, Lat, Long))%>%
rename(state = Province.State)
recovered <- gather(recovered, key = "date", value = "recovered", -"state")
recovered$state <-as.character(recovered$state)
# fix date inconsistency
recovered$date <-  gsub("2020", "20", aus.corona$date)
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("state", "date"))
aus.corona <- left_join(aus.corona, recovered, by = c("state", "date"))
runApp('App - Worked until last change to data.R')
runApp()
shiny::runApp()
shiny::runApp()
