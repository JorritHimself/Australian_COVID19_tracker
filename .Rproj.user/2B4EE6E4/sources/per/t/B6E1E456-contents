##### clear env ####
rm(list = ls())

# Load packages
library(shiny)
library(shinydashboard)
library(tidyverse)

##################### Fetch updated data ##########################
#### Get data from sources:
# Confirmed cases: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv
# Deaths: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv
# Recovered: https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv
confirmed <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv"))
deaths <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Deaths.csv"))
recovered <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Recovered.csv"))
#### Prep data
# confirmed cases
confirmed <- confirmed %>%
  filter(Country.Region=="Australia") %>%
  filter(Province.State!="From Diamond Princess") %>%
  select (-c(Country.Region, Lat, Long))%>%
  rename(State = Province.State)
confirmed <- gather(confirmed, key = "date", value = "confirmed", -"State")
# Deaths
deaths <- deaths %>%
  filter(Country.Region=="Australia") %>%
  filter(Province.State!="From Diamond Princess") %>%
  select (-c(Country.Region, Lat, Long))%>%
  rename(State = Province.State)
deaths <- gather(deaths, key = "date", value = "deaths", -"State")
# Deaths
recovered <- recovered %>%
  filter(Country.Region=="Australia") %>%
  filter(Province.State!="From Diamond Princess") %>%
  select (-c(Country.Region, Lat, Long))%>%
  rename(State = Province.State)
recovered <- gather(recovered, key = "date", value = "recovered", -"State")
# Put it together
aus.corona <- left_join(confirmed, deaths, by = c("State", "date"))
aus.corona <- left_join(aus.corona, recovered, by = c("State", "date"))
# Fix State factor levels mess
aus.corona$State <- as.character(aus.corona$State)
aus.corona$State <- as.factor(aus.corona$State)
# fix datemess
aus.corona$date <- gsub("X", "0", aus.corona$date)
aus.corona$date <- as.Date(aus.corona$date, "%m.%d.%y")



# Shiny app bits: define user interface
# Define UI for miles per gallon app ----
ui <- pageWithSidebar(
  
  # App title ----
  headerPanel("COVID-19 cases in Australia"),
  
  # Sidebar panel for inputs ----
  sidebarPanel(
    
    # Input: Selector for type of cases ----
    selectInput("Status", "Status:", 
                c("Confirmed" = "confirmed",
                  "Deaths" = "deaths",
                  "Recovered" = "recovered"))
  ),

  # Main panel for displaying outputs ----
  mainPanel()
)






# Define server logic to plot various variables against mpg ----
server <- function(input, output) {

}

shinyApp(ui, server)